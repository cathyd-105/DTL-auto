from time import sleep
from base.BasePage import BasePage
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pyautogui
from selenium.webdriver import ActionChains


class createEnvPage(BasePage):
    labname = (By.LINK_TEXT, 'ding1101-e-1')
    add = (By.XPATH, '//div[@aria-label="Add"]')
    env = (By.LINK_TEXT, 'Service Fabric Lab Cluster') # table[@class='azc-grid-full']/tbody/tr[1]
    env_name = (By.XPATH, '/html/body/div[1]/div[4]/div[2]/section/div[1]/div[1]/div[4]/div[2]/div/div/div[2]/div/div[2]/div[2]/div/div[1]/div/div[3]/div[2]/div/div/div/input')
    username = (By.XPATH, '/html/body/div[1]/div[4]/div[2]/section/div[1]/div[1]/div[4]/div[2]/div/div/div[2]/div/div[2]/div[2]/div/div[1]/div/div[7]/div[2]/div/div/div/input')
    psw1 = (By.XPATH, '/html/body/div[1]/div[4]/div[2]/section/div[1]/div[1]/div[4]/div[2]/div/div/div[2]/div/div[2]/div[2]/div/div[1]/div/div[9]/div[2]/div[1]/div[2]/div/div[1]/span')
    psw2 = (By.XPATH, '//div[@role="combobox"]')
    psw3 = (By.XPATH, '//div[@role="treeitem"]')
    kv = (By.LINK_TEXT, 'ding-en-dtl-e')
    objecs= (By.XPATH, '//div[text()="Objects"]')
    secrets = (By.XPATH, '//div[text()="Secrets"]')
    certificate1 = (By.XPATH, '//table[@class="azc-grid-full"]/tbody/tr[1]')
    certificate2 = (By.XPATH, '//td[@aria-colindex="2"]/div/div/span[2]')
    ding_en_dtl = (By.LINK_TEXT, 'ding-en-dtl-e | Secrets')
    certificate_pw1 = (By.XPATH, '//table[@class="azc-grid-full"]/tbody/tr[2]')
    certificate_pw2 = (By.XPATH, '//td[@aria-colindex="2"]/div/div/span[2]')
    certificate_tb1 = (By.XPATH, '//table[@class="azc-grid-full"]/tbody/tr[3]')
    certificate_tb2 = (By.XPATH, '//td[@aria-colindex="2"]/div/div/span[2]')
    paste_cpw = (By.XPATH, '/html/body/div[1]/div[4]/div[2]/section/div[1]/div[1]/div[4]/div[2]/div/div/div[2]/div/div[2]/div[2]/div/div[1]/div/div[13]/div[2]/div[3]/div[2]/div/div/div/input[1]')
    create_env_button = (By.XPATH, '//span[text()="Add"]')
    settings = (By.XPATH, '//button[@aria-label="expand"]')
    configure= (By.XPATH, '//div[text()="Configuration and policies"]')
    identity = (By.XPATH, '//div[text()="Identity (Preview)"]')
    user_id = (By.XPATH, '//span[text()="User Assigned"]')
    add_id = (By.XPATH, '//div[text()="Add"]')
    choose_id = (By.XPATH, '//div[text()="Choose an existing user assigned managed identity"]')
    eu2e_id = (By.XPATH, '//span[text()="AzSecPackAutoConfigUA-eastus2euap"]')
    ok_button = (By.XPATH, '//div[@title="OK"]')
    save_button = (By.XPATH, '//div[@title="Save"]')
    close_button1 = (By.XPATH, '//button[@aria-label="Dismiss toast notification"]')
    close_button2 = (By.XPATH, '//button[@title="Close"]')
    refresh_button = (By.XPATH, '//div[text()="Refresh"]')
    sf1 = (By.LINK_TEXT, 'sf1')
    sf2 = (By.LINK_TEXT, 'sf2')
    activity_log = (By.XPATH, '//div[text()="Activity log"]')
    remove_id1 = (By.XPATH, '//a[@title="Context menu"]')
    remove_id2 = (By.XPATH, '//div[text()="Remove"]')
    remove_id3 = (By.XPATH, '//div[@title="Yes"]')
    delete_en_button1 = (By.XPATH, '//div[@aria-level="1"]')
    delete_en_button2 = (By.XPATH, '//li[@aria-posinset="1"]')
    delete_en_button3 = (By.XPATH, '//div[@title="Yes"]')
    url = 'https://ms.portal.azure.com/#view/HubsExtension/BrowseResource/resourceType/Microsoft.DevTestLab%2Flabs'

    def __init__(self, driver):
        BasePage.__init__(self, driver)

    # 打开页面并最大化
    def goto_dtl_page(self):
        self.open_url(self.url)
        self.driver.maximize_window()

    def create_env(self):
        # 点击创建的lab
        WebDriverWait(self.driver, 15, 0.5).until(EC.presence_of_element_located((self.labname)))
        self.click_element(*self.labname)
        # 定位add并点击
        WebDriverWait(self.driver, 15, 0.5).until(EC.presence_of_element_located((self.add)))
        self.click_element(*self.add)
        WebDriverWait(self.driver, 50, 0.5).until(EC.presence_of_element_located((self.env)))
        self.click_element(*self.env)

    def type_parameter(self):
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.env_name)))
        self.type_text('sf1', *self.env_name)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.username)))
        self.type_text('vyuhanding', *self.username)
        WebDriverWait(self.driver, 40, 0.5).until(EC.presence_of_element_located((self.psw1)))
        self.click_element(*self.psw1)
        WebDriverWait(self.driver, 40, 0.5).until(EC.presence_of_element_located((self.psw2)))
        drop_down_boxes = self.locate_elements(*self.psw2)
        drop_down_boxes[4].click()
        WebDriverWait(self.driver, 40, 0.5).until(EC.presence_of_element_located((self.psw3)))
        drop_down_boxes2 = self.locate_elements(*self.psw3)
        drop_down_boxes2[0].click()
    
    def open_new(self):
        js = 'window.open("https://ms.portal.azure.com/?feature.msaljs=false#browse/Microsoft.KeyVault%2Fvaults");'
        self.driver.execute_script(js)
        self.switch_window(1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.kv)))
        self.click_element(*self.kv)
        # WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.objecs)))
        # self.click_element(*self.objecs)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.secrets)))
        self.click_element(*self.secrets)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate1)))
        self.click_element(*self.certificate1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate2)))
        self.click_element(*self.certificate2)
        sleep(2)
        pyautogui.click(730,745)

    def copy_value(self):
        sleep(2)
        self.switch_window(0)
        sleep(1)
        pyautogui.click(1350,660)
        pyautogui.hotkey('ctrl', 'v')
        self.switch_window(1)
        self.click_element(*self.ding_en_dtl)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_pw1)))
        self.click_element(*self.certificate_pw1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_pw2)))
        self.click_element(*self.certificate_pw2)
        sleep(2)
        pyautogui.click(730,745)
        # 切回第一页粘贴第二项
        sleep(2)
        self.switch_window(0)
        sleep(1)
        target = self.locate_element(*self.paste_cpw)
        self.driver.execute_script('arguments[0].scrollIntoView();', target)
        pyautogui.click(1350,295)
        pyautogui.hotkey('ctrl', 'v')
        self.switch_window(1)
        self.click_element(*self.ding_en_dtl)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_tb1)))
        self.click_element(*self.certificate_tb1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_tb2)))
        self.click_element(*self.certificate_tb2)
        sleep(2)
        pyautogui.click(730,745)
        # 切回第一页粘贴第三项
        sleep(2)
        self.switch_window(0)
        sleep(1)
        pyautogui.click(1350,350)
        pyautogui.hotkey('ctrl', 'v')
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.create_env_button)))
        self.click_element(*self.create_env_button)
        sleep(3)

    def change_identity(self):
        # list = self.locate_elements(*self.settings)
        # list[1].click()
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.configure)))
        self.click_element(*self.configure)
        # sleep(3)
        # list2 = self.locate_elements(*self.settings)
        # list2[1].click()
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.identity)))
        self.click_element(*self.identity)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.user_id)))
        self.click_element(*self.user_id)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.add_id)))
        list3 = self.locate_elements(*self.add_id)
        list3[0].click()
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.choose_id)))
        self.click_element(*self.choose_id)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.eu2e_id)))
        self.click_element(*self.eu2e_id)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.ok_button)))
        self.click_element(*self.ok_button)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.save_button)))
        self.click_element(*self.save_button)
        # sleep(10)
        WebDriverWait(self.driver, 50, 0.5).until(EC.text_to_be_present_in_element((By.XPATH, ("//div[text()='Saving lab identities']")), 'Saving lab identities'))
        self.click_element(*self.close_button1)
        sleep(2)
        close_list = self.locate_elements(*self.close_button2)
        close_list[2].click()

    def create_env2(self):
        # 定位add并点击
        WebDriverWait(self.driver, 15, 0.5).until(EC.presence_of_element_located((self.add)))
        self.click_element(*self.add)
        WebDriverWait(self.driver, 50, 0.5).until(EC.presence_of_element_located((self.env)))
        self.click_element(*self.env)
        # 输入参数
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.env_name)))
        self.type_text('sf2', *self.env_name)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.username)))
        self.type_text('vyuhanding', *self.username)
        WebDriverWait(self.driver, 40, 0.5).until(EC.presence_of_element_located((self.psw1)))
        self.click_element(*self.psw1)
        WebDriverWait(self.driver, 40, 0.5).until(EC.presence_of_element_located((self.psw2)))
        drop_down_boxes = self.locate_elements(*self.psw2)
        drop_down_boxes[4].click()
        WebDriverWait(self.driver, 40, 0.5).until(EC.presence_of_element_located((self.psw3)))
        drop_down_boxes2 = self.locate_elements(*self.psw3)
        drop_down_boxes2[0].click()
        # 切换到第二页复制
        self.switch_window(1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.ding_en_dtl)))
        self.click_element(*self.ding_en_dtl)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate1)))
        self.click_element(*self.certificate1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate2)))
        self.click_element(*self.certificate2)
        sleep(2)
        pyautogui.click(730,745)
        # 切回第一页粘贴第一项
        sleep(2)
        self.switch_window(0)
        sleep(1)
        pyautogui.click(1350,660)
        pyautogui.hotkey('ctrl', 'v')
        # 复制第二项
        self.switch_window(1)
        self.click_element(*self.ding_en_dtl)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_pw1)))
        self.click_element(*self.certificate_pw1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_pw2)))
        self.click_element(*self.certificate_pw2)
        sleep(2)
        pyautogui.click(730,745)
        # 粘贴第二项
        sleep(2)
        self.switch_window(0)
        sleep(1)
        target = self.locate_element(*self.paste_cpw)
        self.driver.execute_script('arguments[0].scrollIntoView();', target)
        pyautogui.click(1350,295)
        pyautogui.hotkey('ctrl', 'v')
        # 去复制第三项
        self.switch_window(1)
        self.click_element(*self.ding_en_dtl)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_tb1)))
        self.click_element(*self.certificate_tb1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.certificate_tb2)))
        self.click_element(*self.certificate_tb2)
        sleep(2)
        pyautogui.click(730,745)
        # 粘贴第三项
        sleep(3)
        self.switch_window(0)
        sleep(2)
        pyautogui.click(1350,350)
        pyautogui.hotkey('ctrl', 'v')
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.create_env_button)))
        self.click_element(*self.create_env_button)

    def view_log(self):
        # 查看日志
        sleep(2)
        WebDriverWait(self.driver, 180, 0.5).until(EC.text_to_be_present_in_element((By.XPATH, ("//div[text()='Error while creating environment sf2']")), 'Error while creating environment sf2'))
        refresh_list = self.locate_elements(*self.refresh_button)
        refresh_list[1].click()
        WebDriverWait(self.driver, 30, 0.5).until(EC.element_to_be_clickable((self.sf1)))
        self.click_element(*self.sf1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.element_to_be_clickable((self.activity_log)))
        self.click_element(*self.activity_log)
        sleep(5)
        close_list = self.locate_elements(*self.close_button2)
        close_list[2].click()
        WebDriverWait(self.driver, 30, 0.5).until(EC.element_to_be_clickable((self.sf2)))
        self.click_element(*self.sf2)
        WebDriverWait(self.driver, 30, 0.5).until(EC.element_to_be_clickable((self.activity_log)))
        self.click_element(*self.activity_log)
        sleep(5)
        close_list = self.locate_elements(*self.close_button2)
        close_list[2].click()
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.configure)))
        self.click_element(*self.configure)
        # WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.identity)))
        sleep(2)
        self.click_element(*self.identity)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.user_id)))
        self.click_element(*self.user_id)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.remove_id1)))
        self.click_element(*self.remove_id1)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.remove_id2)))
        self.click_element(*self.remove_id2)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.remove_id3)))
        self.click_element(*self.remove_id3)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.save_button)))
        self.click_element(*self.save_button)
        sleep(5)
        close_list = self.locate_elements(*self.close_button2)
        close_list[2].click()

    def delete_en(self):
        WebDriverWait(self.driver, 50, 0.5).until(EC.text_to_be_present_in_element((By.LINK_TEXT, ("sf2")), 'sf2'))
        btn = self.locate_elements(*self.delete_en_button1)
        ActionChains(self.driver).context_click(btn[0]).perform()
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.delete_en_button2)))
        self.click_element(*self.delete_en_button2)
        WebDriverWait(self.driver, 30, 0.5).until(EC.presence_of_element_located((self.delete_en_button3)))
        self.click_element(*self.delete_en_button3)
        WebDriverWait(self.driver, 100, 0.5).until(EC.text_to_be_present_in_element((By.XPATH, ("//div[text()='Deleted environment sf2']")), 'Deleted environment sf2'))
        self.click_element(*self.refresh_button)

        

 


